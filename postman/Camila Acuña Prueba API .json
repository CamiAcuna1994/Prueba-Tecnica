{
  "info": {
    "name": "FakeStore API Testing",
    "_postman_id": "fakestore-api-tests-001",
    "description": "Colección de pruebas funcionales para FakeStore API con validaciones incluidas.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Obtener productos por categoría (electronics)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://fakestoreapi.com/products/category/electronics",
          "protocol": "https",
          "host": [
            "fakestoreapi",
            "com"
          ],
          "path": [
            "products",
            "category",
            "electronics"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Category must be electronics\", function () {",
              "    pm.response.json().forEach(item => {",
              "        pm.expect(item.category).to.eql(\"electronics\");",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Obtener producto por ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://fakestoreapi.com/products/5",
          "protocol": "https",
          "host": [
            "fakestoreapi",
            "com"
          ],
          "path": [
            "products",
            "5"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains required fields\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('title');",
              "    pm.expect(jsonData).to.have.property('price');",
              "    pm.expect(jsonData).to.have.property('description');",
              "    pm.expect(jsonData).to.have.property('category');",
              "    pm.expect(jsonData).to.have.property('image');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Crear un producto",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Laptop Gamer\",\n  \"price\": 1500,\n  \"description\": \"Laptop con RTX 4070\",\n  \"image\": \"https://i.pravatar.cc\",\n  \"category\": \"electronics\"\n}"
        },
        "url": {
          "raw": "https://fakestoreapi.com/products",
          "protocol": "https",
          "host": [
            "fakestoreapi",
            "com"
          ],
          "path": [
            "products"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "pm.test(\"Response has id\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. Actualizar imagen de producto creado",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"image\": \"https://picsum.photos/200\"\n}"
        },
        "url": {
          "raw": "https://fakestoreapi.com/products/1",
          "protocol": "https",
          "host": [
            "fakestoreapi",
            "com"
          ],
          "path": [
            "products",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Image was updated\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.image).to.eql(\"https://picsum.photos/200\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}